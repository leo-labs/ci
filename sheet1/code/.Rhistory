Perceptron
falsePositive <- 0
Perceptron<-function(path){
}
source(Perceptron.R)
ls
ls()
getcwd()
getwd()
getcwd()+"kkk"
getwd()+"kkk"
getwd()."kkk"
source("./Perceptron.R")
Perceptron("../../../sheets/Set1.txt")
Perceptron("../../../sheets/set1.txt")
Perceptron("./../../../sheets/set1.txt")
Perceptron("C:/Users/Leonard/Documents/uni/ci/ci/sheet1/code/sheets/set1.txt")
Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
y <-seq(1,nrow(result),1)
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/ci/sheet1/code/sheets/set1.txt")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
sample(1:10,30)
sample(1:10,30,replace=T)
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
weight <- [1,2,4]
weight <- c(1,2,4)
wieght
weight
weight <- c(1,4)
weight
traningData <- as.matric(read.table("C:\Users\Leonard\Documents\uni\ci\sheet1\set1.txt"))
traningData <- as.matric(read.table("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt"))
traningData <- as.matrix(read.table("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt"))
head(trainingData)
head(traningData)
twd <- traningData[,-ncol(traningData)]
hed(twd)
head(twd)
weight*twd[,2]
weight*twd[2,]
twd[2,]
weight
twd[2,]
weight*twd[2,]
weight <- c(2,4)
weight*twd[2,]
sum(weight*twd[2,])
weight%*%twd[2,]
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
print(paste0("a","d","c")
)
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
result
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
plot(traningData)
head(traningData)
head(traningData,col=c("red","blue")
)
plot(traningData,col=c("red","blue"))
plot(traningData,col=c("red","blue")[z])
plot(traningData,col=c("red","blue")[v3])
plot(traningData,col=c("red","blue")[V3])
plot(traningData,col=c("red","blue")[3])
plot(traningData,col=c("red","blue")[])
plot(traningData,col=c("red","blue")[DF$V3])
help(attach)
attach(traningdata)
attach(traningData)
plot(traningData,col=V3)
plot(traningData,col=v3)
plot(traningData,col=trainingdata[,3])
plot(traningData,col=traningData[,3])
plot(traningData[,1],traningData[,2],col=traningData[,3])
color <- c("red","green")
plot(traningData,col=color[traningData[,3]+1])
source("./Perceptron.R")
source("./Perceptron.R")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
plot(result, xlim=c(0.1,1) , ylim=c(0.1,1) , xlab = "Recall" , ylab = "Precision")
plot(result, xlab = "Recall" , ylab = "Precision")
trainingWeightData[3,]
traningData[3,]
traningData[3,2]
traningData[3,1:2]
[1, 1] + traningData[3,1:2]
c(1,1) + traningData[3,1:2]
[1, 1] + traningData[4,1:2]
traningData[4,1:2]
c(1,2) + traningData[4,1:2]
result
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set2.txt")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set3.txt")
result
plot(result)
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set3.txt")
result
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set3.txt")
result
)count(result
count(result)
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set3.txt")
last <- function(x) { tail(x, n = 1) }
Perceptron<-function(path){
#Read File from Path as Matrix
print("Intiliazing Matrix and Data please wait...")
trainingData <- as.matrix(read.table(path))
trainingWeightData <- trainingData[,-ncol(trainingData)]
# Initialize Data for plotting
falseClassified  <- 0
truePositive <- 0
trueNegative <- 0
falsePositive <- 0
falseNegative <- 0
overallClassifications <- 0
rowOfTrainingElement <- 0
#Arrays for gathering Recall and Precision Values
recallValues <- c()
precisionValues <- c()
#Condition to stop the algorithm
breakCondition <- 0
breakConditionMax <- 0
##########################################################################################
#Choose random weight to start the algorithm depending on the number of Colums of the Data
#Initially every element of weight has the same value, but that should not pose a problem
#There must be another way to instantiate an array with a dynamic number of elements
##########################################################################################
weight <- rep(0,ncol(trainingWeightData))
#rep(runif(1,-1,1),ncol(trainingWeightData))
print (paste0("Number of Rows ",nrow(trainingData)))
print("Data initialized: begin learning of pattern...")
##########################################################################################
#Implementiation of the Perceptron Learning Algorithm
#Choose an arbitrary rowOfTrainingElement in P u N
#Check if correctly classified or not and take action respectively
##########################################################################################
error <- TRUE;
while(error && overallClassifications < 1000000) {
error <- FALSE
errcount <- 0
truePositive <- 0
trueNegative <- 0
falsePositive <- 0
falseNegative <- 0
for(i in 1:nrow(trainingData)) {
rowOfTrainingElement <- i
# Detect True Positive Values
if(trainingData[rowOfTrainingElement,ncol(trainingData)]== 1 && (sum(weight*trainingWeightData[rowOfTrainingElement,]) > 0)){
truePositive <- truePositive +1
breakCondition <- breakCondition + 1
}
#Detect True Negative Values
if(trainingData[rowOfTrainingElement,ncol(trainingData)]== 0 && (sum(weight*trainingWeightData[rowOfTrainingElement,]) <= 0)){
trueNegative <- trueNegative +1
breakCondition <- breakCondition + 1
}
#Detect False Negative Values
if(trainingData[rowOfTrainingElement,ncol(trainingData)]== 1 && (sum(weight*trainingWeightData[rowOfTrainingElement,]) <= 0)){
falseNegative <- falseNegative +1
falseClassified <- falseClassified +1
weight <- weight + trainingWeightData[rowOfTrainingElement,]
error <- TRUE
errcount <- errcount + 1
breakCondition <- 0
}
#Detect False Positive Values
if(trainingData[rowOfTrainingElement,ncol(trainingData)]== 0 && (sum(weight*trainingWeightData[rowOfTrainingElement,]) > 0)){
error <- TRUE
errcount <- errcount + 1
falsePositive <- falsePositive +1
falseClassified <- falseClassified +1
weight <- weight - trainingWeightData[rowOfTrainingElement,]
breakCondition <- 0
}
overallClassifications <- overallClassifications + 1
##########################################################################################
#Compute Precision and Recall values and store them in their respective arrays
#Recall = truePositive/(truePositive+falseNegative)
#Precision = truePositive/(truePositive+falsePositive)
##########################################################################################
##########################################################################################
#Show Progress by printing number of consecutive correctly classified Examples
#Stop Algorithm if there are 500? consecutive correctly classified Examples
##########################################################################################
#if(breakCondition > breakConditionMax){
# breakConditionMax <- breakCondition
#print(breakConditionMax)
#}
#if(breakCondition == nrow(trainingData)){break}
}
recallValues <- c(recallValues,truePositive/(truePositive+falseNegative))
precisionValues <- c(precisionValues,truePositive/(truePositive+falsePositive))
print(paste0("Error count: ",errcount," recall: ", last(recallValues), " prec: ",last(precisionValues)))
if(overallClassifications %% 25000 == 0){ print (paste0("Overall classified examples ",overallClassifications))}
}
##########################################################################################
#Plot Precision Recall Curve and return P/R Matrix for further use
##########################################################################################
print("Pattern learned ! Plotting Precision Recall Curve...")
#recallValueMatrix <- matrix(recallValues,nrow = overallClassifications/nrow(trainingData),ncol = 1)
#precisionValueMatrix <- matrix(precisionValues,nrow = overallClassifications/nrow(trainingData),ncol = 1)
plot(recallValues, precisionValues, xlab = "Recall" , ylab = "Precision")
result <- cbind(recallValues,precisionValues)
print(weight)
return(result)
}
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set3.txt")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set3.txt")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set3.txt")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set3.txt")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set3.txt")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set3.txt")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set2.txt")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- percplot("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
result <- percplot("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set2.txt")
source("./Perceptron.R")
result <- percplot("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
result <- percplot("C:/Users/Leonard/Documents/uni/ci/sheet1/set2.txt")
result <- percplot("C:/Users/Leonard/Documents/uni/ci/sheet1/set3.txt")
result <- percplot("C:/Users/Leonard/Documents/uni/ci/sheet1/set2.txt")
result <- percplot("C:/Users/Leonard/Documents/uni/ci/sheet1/set3.txt")
result <- percplot("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
result <- percplot("C:/Users/Leonard/Documents/uni/ci/sheet1/set2.txt")
result <- percplot("C:/Users/Leonard/Documents/uni/ci/sheet1/set3.txt")
result <- percplot("C:/Users/Leonard/Documents/uni/ci/sheet1/set3.txt")
source("./Perceptron.R")
result <- percplot("C:/Users/Leonard/Documents/uni/ci/sheet1/set3.txt")
source("./Perceptron.R")
result <- percplot("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
result <- Perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
result <- perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
source("./Perceptron.R")
result <- perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
result <- perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
result <- perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
result <- perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
source("./Perceptron.R")
result <- perceptron("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
dataPlot("C:/Users/Leonard/Documents/uni/ci/sheet1/set1.txt")
dataPlot("C:/Users/Leonard/Documents/uni/ci/sheet1/set2.txt")
dataPlot("C:/Users/Leonard/Documents/uni/ci/sheet1/set3.txt")
